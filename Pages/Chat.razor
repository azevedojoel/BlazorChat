@page "/chat"
@using System.Collections.Generic
@using BlazorChat.Services
@using OpenAI.Chat
@using Markdig
@using Markdig.Extensions
@using Microsoft.JSInterop
@inject ChatService ChatService
@inject IJSRuntime JSRuntime

<PageTitle>Chat</PageTitle>

<div class="chat-container">
    <div class="chat-header">
        <h2>Blazor Chat</h2>
    </div>
    <hr class="header-divider" />

    <div class="chat-messages" id="messageContainer">
        @foreach (var message in _messages)
        {
            <div class="message-row @(message.IsUser ? "user" : "assistant")">
                <div class="message @(message.IsUser ? "user-message" : "assistant-message")">
                    @if (message.ToolCalls.Any())
                    {
                        <div class="tool-calls-container">
                            @foreach (var toolCall in message.ToolCalls)
                            {
                                <div class="tool-call @toolCall.State.ToLower()">
                                    <span class="tool-call-badge">@toolCall.State</span>
                                    <span class="tool-call-name">@toolCall.Name</span>
                                </div>
                            }
                        </div>
                    }
                    <div class="message-content">
                        @((MarkupString)FormatMessage(message.Content))
                    </div>
                </div>
            </div>
        }
        @if (_isStreaming)
        {
            <div class="message-row assistant">
                <div class="message assistant-message">
                    @if (_currentToolCalls.Any())
                    {
                        <div class="tool-calls-container">
                            @foreach (var toolCall in _currentToolCalls)
                            {
                                <div class="tool-call @toolCall.State.ToLower()">
                                    <span class="tool-call-badge">@toolCall.State</span>
                                    <span class="tool-call-name">@toolCall.Name</span>
                                </div>
                            }
                        </div>
                    }
                    <div class="message-content">
                        @((MarkupString)FormatMessage(_currentResponse))
                    </div>
                </div>
            </div>
            <div class="loading-container">
                <img width="48" height="48" src="/daily_thread_logo.png" alt="Loading..." class="loading-spinner" />
            </div>
        }
    </div>

    <div class="chat-input-container">
        <div class="chat-input">
            <textarea @bind-value="_userInput" @bind-value:event="oninput" @onkeydown="HandleKeyDown"
                placeholder="Send a message..." disabled="@_isStreaming" id="chatInput" rows="1"
                class="input-field" @ref="_textAreaRef"></textarea>
            <button @onclick="SendMessage" disabled="@(_isStreaming || string.IsNullOrWhiteSpace(_userInput))"
                class="send-button">
                <i class="fas fa-arrow-up"></i>
            </button>
        </div>
    </div>
</div>

@code {
    private List<ChatMessage> _messages = new();
    private string _userInput = string.Empty;
    private string _currentResponse = string.Empty;
    private bool _isStreaming = false;
    private List<ToolCall> _currentToolCalls = new();
    private ElementReference _textAreaRef;
    private MarkdownPipeline _pipeline = new MarkdownPipelineBuilder()
    .UseAdvancedExtensions()
    .DisableHtml()
    .ConfigureNewLine("\n")
    .Build();
    
    protected override void OnInitialized()
    {
        // Optional: Add a system message to set the tone
        ChatService.AddSystemMessage(@"
You are a helpful assistant with access to real-time web search and document retrieval tools. When answering user
questions, first use web_search to find relevant sources. Then, if the search results include potentially useful links,
call fetch_url on the most relevant ones to extract detailed information before answering. Only answer after gathering
enough supporting context.

Prioritize:
• Official documentation and reputable sources
• Pages that match the user's question closely
• Fast and informative summaries

Be concise and clear in your final answer. Use the tools independently and intelligently to support accurate, helpful
responses.
");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await AutoResizeTextArea();
        }
    }

    private async Task AutoResizeTextArea()
    {
        await JSRuntime.InvokeVoidAsync("autoResizeTextArea", _textAreaRef);
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_userInput) || _isStreaming)
            return;

        var userMessage = new ChatMessage { Content = _userInput, IsUser = true };
        _messages.Add(userMessage);

        var userMessageText = _userInput;
        _userInput = string.Empty;
        _currentResponse = string.Empty;
        _currentToolCalls.Clear();
        _isStreaming = true;

        StateHasChanged();
        await AutoResizeTextArea(); // Reset textarea height after clearing

        await foreach (var update in ChatService.GetStreamingCompletionAsync(userMessageText))
        {
            // Process content updates
            foreach (var contentPart in update.ContentUpdate)
            {
                _currentResponse += contentPart.Text;
            }

            // Process tool call updates
            foreach (var toolCallUpdate in update.ToolCallUpdates)
            {
                if (toolCallUpdate.FunctionName == null)
                    continue;

                var existingToolCall = _currentToolCalls
                .FirstOrDefault(tc => tc.Name == toolCallUpdate.FunctionName);
                if (existingToolCall == null)
                {
                    _currentToolCalls.Add(new ToolCall { Name = toolCallUpdate.FunctionName, State = "Calling" });
                }
                else
                {
                    existingToolCall.State = "Processing";
                }
            }

            // Handle finish reason
            if (update.FinishReason == ChatFinishReason.ToolCalls)
            {
                foreach (var toolCall in _currentToolCalls)
                {
                    toolCall.State = "Done";
                }
            }

            StateHasChanged();
            await Task.Delay(1); // Give UI time to update
        }

        // After streaming completes
        var assistantMessage = new ChatMessage
        {
            Content = _currentResponse,
            IsUser = false,
            ToolCalls = new List<ToolCall>(_currentToolCalls)
        };
        _messages.Add(assistantMessage);
        _currentResponse = string.Empty;
        _currentToolCalls.Clear();
        _isStreaming = false;

        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
        else
        {
            await Task.Delay(10); // Small delay to let the input update
            await AutoResizeTextArea();
        }
    }

    private string FormatMessage(string message)
    {
        if (string.IsNullOrEmpty(message)) return string.Empty;

        // Format the markdown
        var html = Markdown.ToHtml(message.TrimEnd(), _pipeline)
        .TrimEnd('\n', '\r') // Remove any trailing newlines
        .Replace("<p>", "") // Remove paragraph tags which add extra spacing
        .Replace("</p>", ""); // Remove closing p tags entirely instead of replacing with br

        return html;
    }

    private void ClearChat()
    {
        _messages.Clear();
        _currentResponse = string.Empty;
        _currentToolCalls.Clear();
        _isStreaming = false;
        ChatService.ClearHistory();
        StateHasChanged();
    }

    private class ChatMessage
    {
        public string Content { get; set; } = string.Empty;
        public bool IsUser { get; set; }
        public List<ToolCall> ToolCalls { get; set; } = new();
    }

    private class ToolCall
    {
        public string Name { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
    }
}